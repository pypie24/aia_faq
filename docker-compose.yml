services:
  web:
    build: .
    container_name: faq_service
    ports:
      - 5000:5000
    expose:
      - 5000
    env_file:
      - .env
    environment:
      - OPENAI_ENDPOINT=${OPENAI_ENDPOINT}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - OPENAI_LLM_API_KEY=${OPENAI_LLM_API_KEY}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL}
      - OPENAI_EMBEDDING_API_KEY=${OPENAI_EMBEDDING_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - FILE_SERVER_ENDPOINT=${FILE_SERVER_ENDPOINT}
      - FILE_SERVER_ACCESS_KEY=${FILE_SERVER_ACCESS_KEY}
      - FILE_SERVER_SECRET_KEY=${FILE_SERVER_SECRET_KEY}
      - FILE_SERVER_BUCKET_NAME=${FILE_SERVER_BUCKET_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./:/app/:u+rw
    networks:
      - faq-network
    depends_on:
      - db
      - chromadb
      - minio

  db:
    image: postgres:15-alpine
    container_name: faq_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - faq-network

  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - 8000:8000
    volumes:
      - chroma_data:/chroma/chroma # Persist data to a local directory
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - faq-network
  
  redis:
    image: redis:7.2-alpine
    container_name: faq_redis
    ports:
      - 6379:6379
    networks:
      - faq-network

  worker:
    build: .
    container_name: celery_worker
    command: celery -A src.tasks.celery_app.celery_app worker --loglevel=info
    env_file:
      - .env
    environment:
      - OPENAI_ENDPOINT=${OPENAI_ENDPOINT}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - OPENAI_LLM_API_KEY=${OPENAI_LLM_API_KEY}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL}
      - OPENAI_EMBEDDING_API_KEY=${OPENAI_EMBEDDING_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - FILE_SERVER_ENDPOINT=${FILE_SERVER_ENDPOINT}
      - FILE_SERVER_ACCESS_KEY=${FILE_SERVER_ACCESS_KEY}
      - FILE_SERVER_SECRET_KEY=${FILE_SERVER_SECRET_KEY}
      - FILE_SERVER_BUCKET_NAME=${FILE_SERVER_BUCKET_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
    networks:
      - faq-network
    volumes:
      - .:/code
    depends_on:
      - redis
      - chromadb

  beat:
    build: .
    container_name: celery_beat
    command: celery -A src.tasks.celery_app.celery_app beat --loglevel=info
    env_file:
      - .env
    environment:
      - OPENAI_ENDPOINT=${OPENAI_ENDPOINT}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - OPENAI_LLM_API_KEY=${OPENAI_LLM_API_KEY}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL}
      - OPENAI_EMBEDDING_API_KEY=${OPENAI_EMBEDDING_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - FILE_SERVER_ENDPOINT=${FILE_SERVER_ENDPOINT}
      - FILE_SERVER_ACCESS_KEY=${FILE_SERVER_ACCESS_KEY}
      - FILE_SERVER_SECRET_KEY=${FILE_SERVER_SECRET_KEY}
      - FILE_SERVER_BUCKET_NAME=${FILE_SERVER_BUCKET_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
    networks:
      - faq-network
    volumes:
      - .:/code
    depends_on:
      - redis
      - chromadb

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    networks:
      - faq-network
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${FILE_SERVER_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${FILE_SERVER_SECRET_KEY}
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console UI
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

volumes:
  db_data:
  chroma_data:
  minio_data:

networks:
  faq-network:
    driver: bridge
