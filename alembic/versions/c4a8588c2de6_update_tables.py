"""update tables

Revision ID: c4a8588c2de6
Revises: ffd3ae850e0b
Create Date: 2025-08-11 15:42:32.809201

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c4a8588c2de6'
down_revision: Union[str, Sequence[str], None] = 'ffd3ae850e0b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('images', sa.Column('variant_id', sa.UUID(), nullable=False))
    op.add_column('images', sa.Column('is_primary', sa.Boolean(), nullable=True))
    op.alter_column('images', 'url',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               nullable=False)
    op.drop_constraint(op.f('uix_image_owner'), 'images', type_='unique')
    op.create_foreign_key(None, 'images', 'product_variants', ['variant_id'], ['id'], ondelete='CASCADE')
    op.drop_column('images', 'owner_type')
    op.drop_column('images', 'slug')
    op.drop_column('images', 'name')
    op.drop_column('images', 'owner_id')
    op.add_column('product_variant_tags', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('product_variant_tags', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('product_variant_tags', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_constraint(op.f('uix_tag_owner'), 'tags', type_='unique')
    op.create_unique_constraint(None, 'tags', ['name'])
    op.drop_column('tags', 'owner_type')
    op.drop_column('tags', 'owner_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tags', sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('tags', sa.Column('owner_type', postgresql.ENUM('PRODUCT_LINE', 'PRODUCT', 'VARIANT', name='ownertypeenum'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tags', type_='unique')
    op.create_unique_constraint(op.f('uix_tag_owner'), 'tags', ['id', 'name', 'owner_type', 'owner_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.drop_column('product_variant_tags', 'updated_at')
    op.drop_column('product_variant_tags', 'created_at')
    op.drop_column('product_variant_tags', 'id')
    op.add_column('images', sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('images', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('images', sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('images', sa.Column('owner_type', postgresql.ENUM('PRODUCT_LINE', 'PRODUCT', 'VARIANT', name='ownertypeenum'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'images', type_='foreignkey')
    op.create_unique_constraint(op.f('uix_image_owner'), 'images', ['id', 'owner_type', 'owner_id', 'position'], postgresql_nulls_not_distinct=False)
    op.alter_column('images', 'url',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.drop_column('images', 'is_primary')
    op.drop_column('images', 'variant_id')
    # ### end Alembic commands ###
