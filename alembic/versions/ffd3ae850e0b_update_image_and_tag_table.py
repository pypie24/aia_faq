"""update image and tag table

Revision ID: ffd3ae850e0b
Revises: 41fbaa6565f9
Create Date: 2025-08-11 14:53:23.184014

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ffd3ae850e0b'
down_revision: Union[str, Sequence[str], None] = '41fbaa6565f9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tag_assignments')
    op.drop_table('image_assignments')
    op.add_column('images', sa.Column('position', sa.Integer(), nullable=True))
    op.add_column('images', sa.Column('owner_type', sa.Enum('PRODUCT_LINE', 'PRODUCT', 'VARIANT', name='ownertypeenum'), nullable=True))
    op.add_column('images', sa.Column('owner_id', sa.UUID(), nullable=False))
    op.create_unique_constraint('uix_image_owner', 'images', ['id', 'owner_type', 'owner_id', 'position'])
    op.add_column('tags', sa.Column('owner_id', sa.UUID(), nullable=False))
    op.add_column('tags', sa.Column('owner_type', sa.Enum('PRODUCT_LINE', 'PRODUCT', 'VARIANT', name='ownertypeenum'), nullable=False))
    op.create_unique_constraint('uix_tag_owner', 'tags', ['id', 'name', 'owner_type', 'owner_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uix_tag_owner', 'tags', type_='unique')
    op.drop_column('tags', 'owner_type')
    op.drop_column('tags', 'owner_id')
    op.drop_constraint('uix_image_owner', 'images', type_='unique')
    op.drop_column('images', 'owner_id')
    op.drop_column('images', 'owner_type')
    op.drop_column('images', 'position')
    op.create_table('image_assignments',
    sa.Column('image_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], name=op.f('image_assignments_image_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('image_assignments_pkey')),
    sa.UniqueConstraint('image_id', 'entity_id', 'entity_type', 'sort_order', name=op.f('uix_image_assignment'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('tag_assignments',
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('tag_assignments_tag_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tag_assignments_pkey')),
    sa.UniqueConstraint('tag_id', 'entity_id', 'entity_type', 'sort_order', name=op.f('uix_tag_assignment'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
